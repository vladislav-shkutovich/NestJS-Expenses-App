name: Docker, Tag and Release

on:
  push:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Docker Image Manual Tag'
        required: false

jobs:
  build-and-push:
    name: Build and push Docker Image, create Tag and Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.12.0'

      - name: Get Branch Name
        id: get_branch
        run: echo "branch=$(echo ${GITHUB_REF#refs/heads/})" >> $GITHUB_OUTPUT

      - name: Get Commit SHA
        id: get_sha
        run: echo "commit_sha=$(git rev-parse --short=7 HEAD)" >> $GITHUB_OUTPUT

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Tag
        id: set_tag
        run: |
          if [ "${{ github.ref }}" == "refs/heads/cd-cd-phase-2" ]; then
            VERSION=$(node -p "require('./package.json').version" | tr -d ' \n')
            echo "Extracted VERSION: $VERSION"

            SEMVER_REGEX="^[0-9]+\.[0-9]+\.[0-9]+$"
            if [[ ! "$VERSION" =~ $SEMVER_REGEX ]]; then
              echo "Invalid version format in package.json. Must follow SemVer (e.g., 0.1.0)."
              exit 1
            fi

            PREV_TAG=$(git tag --list 'v[0-9]*.[0-9]*.[0-9]*' | sort -V | tail -n1)
            if [ -z "$PREV_TAG" ]; then
              echo "No previous tag found. This might be the first release."
              PREV_VERSION="0.0.0"
            else
              PREV_VERSION=${PREV_TAG#v}
              echo "Previous version: $PREV_VERSION"
            fi

            version_greater_or_equal() {
              IFS='.' read -r MAJOR1 MINOR1 PATCH1 <<< "$1"
              IFS='.' read -r MAJOR2 MINOR2 PATCH2 <<< "$2"

              if (( MAJOR1 > MAJOR2 )); then
                return 0
              elif (( MAJOR1 < MAJOR2 )); then
                return 1
              fi

              if (( MINOR1 > MINOR2 )); then
                return 0
              elif (( MINOR1 < MINOR2 )); then
                return 1
              fi

              if (( PATCH1 >= PATCH2 )); then
                return 0
              else
                return 1
              fi
            }

            if version_greater_or_equal "$VERSION" "$PREV_VERSION"; then
              echo "New version ($VERSION) is valid and not lower than the previous version ($PREV_VERSION)."
            else
              echo "New version ($VERSION) is lower than the previous version ($PREV_VERSION)."
              exit 1
            fi

            TAG_VERSIONS="v$VERSION"
            echo "version_tag=$TAG_VERSIONS" >> $GITHUB_OUTPUT
          fi

          BRANCH_TAG="${{ steps.get_branch.outputs.branch }}"
          COMMIT_TAG="${{ steps.get_sha.outputs.commit_sha }}"
          if [ "${{ github.ref }}" == "refs/heads/cd-cd-phase-2" ]; then
            TAGS="$BRANCH_TAG,$COMMIT_TAG,$TAG_VERSIONS"
          else
            TAGS="$BRANCH_TAG,$COMMIT_TAG"
          fi
          echo "tags=$TAGS" >> $GITHUB_OUTPUT

      - name: Debug Tags
        run: |
          echo "Branch Tag: ${{ steps.get_branch.outputs.branch }}"
          echo "Commit Tag: ${{ steps.get_sha.outputs.commit_sha }}"
          echo "Version Tag: ${{ steps.set_tag.outputs.version_tag }}"
          echo "All Tags: ${{ steps.set_tag.outputs.tags }}"

      - name: Build Docker Image
        run: |
          IFS=',' read -r -a TAG_ARRAY <<< "${{ steps.set_tag.outputs.tags }}"
          for tag in "${TAG_ARRAY[@]}"; do
            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:$tag .
          done

      - name: Push Docker Image
        run: |
          IFS=',' read -r -a TAG_ARRAY <<< "${{ steps.set_tag.outputs.tags }}"
          for tag in "${TAG_ARRAY[@]}"; do
            docker push ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.DOCKERHUB_REPOSITORY }}:$tag
          done

      - name: Create GitHub Release and Tag (Main Branch Only)
        if: github.ref == 'refs/heads/cd-cd-phase-2'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.set_tag.outputs.version_tag }}
          release_name: Release ${{ steps.set_tag.outputs.version_tag }}
          body: 'Release version ${{ steps.set_tag.outputs.version_tag }}'
          draft: false
          prerelease: false
